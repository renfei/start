<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.renfei.repository.dao.start.TStartKvStorageMapper">
    <resultMap id="BaseResultMap" type="net.renfei.repository.dao.start.model.TStartKvStorage">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="keys" jdbcType="VARCHAR" property="keys"/>
        <result column="expiration" jdbcType="DATE" property="expiration"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
               type="net.renfei.repository.dao.start.model.TStartKvStorage">
        <result column="values" jdbcType="LONGVARCHAR" property="values"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        `id`
        , `keys`, `expiration`
    </sql>
    <sql id="Blob_Column_List">
        `values`
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="net.renfei.repository.dao.start.model.TStartKvStorageExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_start_kv_storage
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="net.renfei.repository.dao.start.model.TStartKvStorageExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_start_kv_storage
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_start_kv_storage
        where `id` = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from t_start_kv_storage
        where `id` = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="net.renfei.repository.dao.start.model.TStartKvStorageExample">
        delete from t_start_kv_storage
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="net.renfei.repository.dao.start.model.TStartKvStorage">
        insert into t_start_kv_storage (`id`, `keys`, `expiration`,
                                        `values`)
        values (#{id,jdbcType=BIGINT}, #{keys,jdbcType=VARCHAR}, #{expiration,jdbcType=DATE},
                #{values,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="net.renfei.repository.dao.start.model.TStartKvStorage">
        insert into t_start_kv_storage
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="keys != null">
                `keys`,
            </if>
            <if test="expiration != null">
                `expiration`,
            </if>
            <if test="values != null">
                `values`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="keys != null">
                #{keys,jdbcType=VARCHAR},
            </if>
            <if test="expiration != null">
                #{expiration,jdbcType=DATE},
            </if>
            <if test="values != null">
                #{values,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="net.renfei.repository.dao.start.model.TStartKvStorageExample"
            resultType="java.lang.Long">
        select count(*) from t_start_kv_storage
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_start_kv_storage
        <set>
            <if test="record.id != null">
                `id` = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.keys != null">
                `keys` = #{record.keys,jdbcType=VARCHAR},
            </if>
            <if test="record.expiration != null">
                `expiration` = #{record.expiration,jdbcType=DATE},
            </if>
            <if test="record.values != null">
                `values` = #{record.values,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update t_start_kv_storage
        set `id` = #{record.id,jdbcType=BIGINT},
        `keys` = #{record.keys,jdbcType=VARCHAR},
        `expiration` = #{record.expiration,jdbcType=DATE},
        `values` = #{record.values,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_start_kv_storage
        set `id` = #{record.id,jdbcType=BIGINT},
        `keys` = #{record.keys,jdbcType=VARCHAR},
        `expiration` = #{record.expiration,jdbcType=DATE}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="net.renfei.repository.dao.start.model.TStartKvStorage">
        update t_start_kv_storage
        <set>
            <if test="keys != null">
                `keys` = #{keys,jdbcType=VARCHAR},
            </if>
            <if test="expiration != null">
                `expiration` = #{expiration,jdbcType=DATE},
            </if>
            <if test="values != null">
                `values` = #{values,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where `id` = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.renfei.repository.dao.start.model.TStartKvStorage">
        update t_start_kv_storage
        set `keys`       = #{keys,jdbcType=VARCHAR},
            `expiration` = #{expiration,jdbcType=DATE},
            `values`     = #{values,jdbcType=LONGVARCHAR}
        where `id` = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="net.renfei.repository.dao.start.model.TStartKvStorage">
        update t_start_kv_storage
        set `keys`       = #{keys,jdbcType=VARCHAR},
            `expiration` = #{expiration,jdbcType=DATE}
        where `id` = #{id,jdbcType=BIGINT}
    </update>
</mapper>